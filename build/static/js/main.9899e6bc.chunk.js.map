{"version":3,"sources":["Service.js","Components.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","getData","response","data","newObject","axios","post","then","id","put","delete","Notification","props","message","class","PersonForm","onSubmit","event","preventDefault","obj","name","newName","number","newNumber","copy","persons","some","person","window","confirm","filter","index","findIndex","service","setPersons","push","triggerUpdate","setNotification","setNotificationClass","setTimeout","onChange","nameHandler","numberHandler","Filter","Persons","toLowerCase","includes","map","onClick","item","catch","error","App","useState","setNewName","setNewNumber","setFilter","notification","notificationClass","update","setUpdate","useEffect","get","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9899e6bc.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getData = response => response.data\n\nconst getAll = () => axios.get(baseUrl).then(getData)\nconst create = newObject => axios.post(baseUrl, newObject).then(getData)\nconst update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject).then(getData)\nconst destroy = id => axios.delete(`${baseUrl}/${id}`)\n\nexport default {getAll, create, update, destroy}","import React from 'react'\nimport service from './Service.js'\n\nconst Notification = (props) => {\n  if (props.message === null) {\n    return null\n  }\n  return (\n    <div class={props.class}>\n      {props.message}\n    </div>\n  )\n}  \n\nconst PersonForm = (props) => {\n\n    const submitHandler = event => {\n        event.preventDefault()\n        const obj = {name: props.newName, number: props.newNumber}\n        const copy = [...props.persons]\n        if (!copy.some(person => person.name === props.newName)) {\n          service.create(obj).then(() => {\n            copy.push(obj)\n            props.setPersons(copy)\n            props.triggerUpdate()\n            props.setNotification(`Added ${obj.name}`)\n            props.setNotificationClass(\"success\")\n            setTimeout(() => props.setNotification(null), 2000)\n          })\n        } else if(window.confirm(`${props.newName} is already added to phonebook, replace the old number with a new one?`)) {\n          const id = props.persons.filter(person => person.name === obj.name)[0].id\n          const index = props.persons.findIndex(person => person.id === id)\n          service.update(id, obj)\n          copy[index] = obj\n          props.setPersons(copy)\n        }\n    }\n\n    return (\n        <form onSubmit={submitHandler}>\n        <div>\n            name: <input onChange={props.nameHandler}></input>\n        </div>\n        <div>\n            number: <input onChange={props.numberHandler}></input>\n        </div>\n        <div>\n            <button>add</button>\n        </div>\n        </form>\n    )\n}\n\nconst Filter = (props) => (\n    <div>\n      filter shown with: <input onChange={props.onChange}></input>\n    </div>\n)\n\nconst Persons = (props) => {\n  \n  let copy = [...props.persons]\n\n  const filterPersons = () => {\n      return copy.filter(person => (\n        person.name.toLowerCase().includes(props.filter.toLowerCase())\n      ))\n    }\n\n    return (filterPersons().map(person =>\n        <p>{person.name} {person.number} <button onClick={() => {\n          if (window.confirm(`Delete ${person.name}`)) {\n            copy = copy.filter(item => item.id !== person.id)\n            service.destroy(person.id).then(props.setPersons(copy))\n            .catch( error => {\n              props.setNotification(`Information of ${person.name} has already been removed from server`)\n              props.setNotificationClass('error')\n              setTimeout(() => props.setNotification(null), 5000)\n            })\n            props.triggerUpdate()\n          }\n        }}>\n        delete</button> </p>\n    ))\n}\n\nexport {\n    PersonForm,\n    Filter,\n    Persons,\n    Notification\n}","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport {PersonForm, Filter, Persons, Notification} from './Components.js'\nimport './App.css'\n\nconst App = () => {\n\n  const baseUrl = '/api/persons'\n\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n  const [ notificationClass, setNotificationClass ] = useState('')\n  const [ update, setUpdate ] = useState(true)\n\n  const triggerUpdate = () => setUpdate(!update)\n\n useEffect(() => {\n    axios\n      .get(baseUrl)\n      .then(response => {\n        setPersons(response.data)\n      })\n  },[update])\n\n  return (\n    <div>\n      \n      <h2>Phonebook</h2>\n\n      <Notification message={notification} class={notificationClass} />\n\n      <Filter onChange={event => setFilter(event.target.value)} />\n\n      <h3>Add a new</h3>\n\n      <PersonForm nameHandler={event => setNewName(event.target.value)}\n                  numberHandler={event => setNewNumber(event.target.value)}\n                  persons={persons}\n                  newName={newName}\n                  newNumber={newNumber}\n                  setPersons={setPersons} \n                  setNotification={setNotification}\n                  setNotificationClass={setNotificationClass}\n                  triggerUpdate={triggerUpdate} /> \n\n      <h3>Numbers</h3>\n\n      <Persons persons={persons} \n               setPersons={setPersons} \n               filter={filter}\n               setNotification={setNotification}\n               setNotificationClass={setNotificationClass}\n               triggerUpdate={triggerUpdate} />\n\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}